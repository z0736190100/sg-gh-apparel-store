openapi: 3.1.0
info:
  version: 1.0.0
  title: Example API
  termsOfService: https://example.com/terms/
  contact:
    name: Contact our support
    email: contact@example.com
    url: http://example.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
    altText: OpenAPI example logo
  description: >
    This is an **example** API to demonstrate features of the OpenAPI
    specification.

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md).

    It also demonstrates features of the
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond
    the standard OpenAPI syntax, we use a few 
    [vendor extensions](https://github.com/Redocly/Redoc/blob/main/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities
    of the service without access to source
    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
externalDocs:
  description: "Find out how to create a GitHub repo for your OpenAPI definition."
  url: 'https://github.com/Redocly/create-openapi-repo'
tags:
  - name: Apparel
    description: "Operations for managing apparel inventory."
  - name: ApparelOrder
    description: "Operations for managing apparel orders."
  - name: Customer
    description: "Operations for managing customers."
x-tagGroups:
  - name: General
    tags:
      - Apparel
      - ApparelOrder
      - Customer
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
paths:
  '/api/v1/apparels':
    $ref: 'paths/apparels.yaml'
  '/api/v1/apparels/{id}':
    $ref: 'paths/apparels_{id}.yaml'
  '/api/v1/apparel-orders':
    $ref: 'paths/apparel-orders.yaml'
  '/api/v1/apparel-orders/{id}':
    $ref: 'paths/apparel-orders_{id}.yaml'
  '/api/v1/apparel-orders/{apparelOrderId}/shipments':
    $ref: 'paths/apparel-orders_{apparelOrderId}_shipments.yaml'
  '/api/v1/apparel-orders/{apparelOrderId}/shipments/{shipmentId}':
    $ref: 'paths/apparel-orders_{apparelOrderId}_shipments_{shipmentId}.yaml'
  '/api/v1/customers':
    $ref: 'paths/customers.yaml'
  '/api/v1/customers/{id}':
    $ref: 'paths/customers_{id}.yaml'
components:
  schemas:
    ApparelDto:
      $ref: 'components/schemas/ApparelDto.yaml'
    ApparelPatchDto:
      $ref: 'components/schemas/ApparelPatchDto.yaml'
    ApparelOrderDto:
      $ref: 'components/schemas/ApparelOrderDto.yaml'
    ApparelOrderLineDto:
      $ref: 'components/schemas/ApparelOrderLineDto.yaml'
    ApparelOrderShipmentDto:
      $ref: 'components/schemas/ApparelOrderShipmentDto.yaml'
    CustomerDto:
      $ref: 'components/schemas/CustomerDto.yaml'
    Page:
      $ref: 'components/schemas/Page.yaml'
    PageOfApparelDto:
      $ref: 'components/schemas/PageOfApparelDto.yaml'
  securitySchemes:
    main_auth:
      description: "Example description text of the OAuth2 scheme."
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            'read:users': read user info
            'write:users': modify or remove users
    api_key:
      description: "Example description text of the API key scheme."
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
